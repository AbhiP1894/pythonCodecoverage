version: 2.1

orbs:
  python: circleci/python@2

jobs:
  build-python:
    docker:
      - image: cimg/python:3.8-node
    steps:
      - checkout
      - python/install-packages
      - run:
          name: Install Build Dependencies
          command: pip install build  # This installs the `build` tool to create packages
      - run:
          name: Build Package
          command: python -m build  # This will create a distribution under `dist/`
      - store_artifacts:
          path: dist  # Store the built package as an artifact
      - run:
          name: Create Test Results Directory
          command: mkdir -p test-results  # Create test-results directory

  test-python:
    docker:
      - image: cimg/python:3.8-node
    steps:
      - checkout
      - python/install-packages
      - run:
          name: Install Test and Coverage Dependencies
          command: |
            pip install -r requirements.txt  # Ensure you have a requirements file
            pip install coverage  # Install coverage.py to track test coverage
      - run:
          name: Run Unittest with Coverage
          command: |
            coverage run -m unittest discover -s tests -p "*.py"  # Adjust <your_package> to your package's name
      - run:
          name: Generate Coverage Report
          command: |
            coverage xml
            coverage html
      - run:
          name: Generate Test Results
          command: |
            python -m unittest discover -s tests -p "*.py" -v | tee test-results/unittest_results.log  # Save unittest output
            
      - store_test_results:
          path: test-results  # Store test results
      - store_artifacts:
          path: coverage.xml  # Store the coverage report as an artifact
      - store_artifacts:
          path: test-results  # Store the test results as artifacts as well
      - store_artifacts:
          path: htmlcov/index.html # Store the HTML coverage report as an artifact

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: deploy
          command: '#e.g. ./deploy.sh'

workflows:
  build-and-test:
    jobs:
      - build-python
      - test-python
    # - deploy:
    #     requires:
    #       - build-python
    #       - test-python
